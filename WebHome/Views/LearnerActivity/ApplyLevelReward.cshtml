@using System.IO
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using System.Web
@using System.Data
@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@using CommonLib.DataAccess
@using CommonLib.Core.Utility
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using WebHome.Models.Resources
@using WebHome.Properties
@functions
{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;

    StageProgress appraisalStage;

    void ApplyLevelReward(UserProfile learner)
    {
        //任務牆點數回饋加碼
        if (appraisalStage != null)
        {
            var player = models.GetTable<Player>()
                .Where(p => p.UID == learner.UID)
                .Where(p => p.ProgressID == appraisalStage.ProgressID)
                .FirstOrDefault();

            var totalPoints = models.GetTable<BonusTransaction>()
                    .Where(t => t.UID == learner.UID)
                    .Where(t => t.TransactionDate >= appraisalStage.StartDate)
                    .Where(t => t.TransactionDate < appraisalStage.EndExclusiveDate)
                    .Where(t => t.CampaignMissionBonus != null)
                    .Sum(t => (int?)t.TransactionPoint) ?? 0;

            if (totalPoints > 0)
            {
                var rewardItem = player?.GameLevel.GameLevelReward
                        .Where(r => r.RewardID == (int)GameLevelReward.RewardDefinition.任務牆點數回饋加碼)
                        .FirstOrDefault();

                if (rewardItem?.Reward > 0)
                {
                    var account = learner.UID.PromptDepositAccount(models);
                    int awardPoints = totalPoints * rewardItem.Reward / 100;
                    var txn = new BonusTransaction
                    {
                        UID = account.UID,
                        TransactionPoint = awardPoints,
                        TransactionDate = DateTime.Now,
                        Reason = $"{GameLevelReward.RewardDefinition.任務牆點數回饋加碼}:{awardPoints}({totalPoints}*{rewardItem.Reward/100M})",
                        ExpirationDate = new DateTime(DateTime.Today.Year + 1, 12, 31),
                    };
                    models.GetTable<BonusTransaction>().InsertOnSubmit(txn);
                    models.SubmitChanges();

                    account.CommitBonusSettlement(models);
                }
            }
        }
        models.SubmitChanges();
    }

}
@{

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _modelState = ViewContext.ModelState;

    AwardQueryViewModel _viewModel = ViewBag.ViewModel as AwardQueryViewModel;
    var Response = ViewContext.HttpContext.Response;

    appraisalStage = models.PromptCurrentStage(_viewModel.DateFrom);
    StageProgress stage = null;
    if (appraisalStage != null)
    {
        stage = appraisalStage;
        //appraisalStage = models.GetTable<StageProgress>()
        //        .Where(s => s.ProgressID < appraisalStage.ProgressID)
        //        .OrderByDescending(s => s.ProgressID)
        //        .FirstOrDefault();
    }

    if (appraisalStage != null)
    {
        DateTime start = appraisalStage.StartDate.Value;
        DateTime exclusiveEnd = appraisalStage.EndExclusiveDate.Value;

        if (stage != null)
        {
            IQueryable<UserProfile> items = models.GetTable<UserProfile>()
                                                .Where(u => u.LevelID == (int)Naming.MemberStatusDefinition.Checked
                                                    || u.LevelID == (int)Naming.MemberStatusDefinition.ReadyToRegister);
            if (_viewModel.UID.HasValue)
            {
                items = items.Where(u => u.UID == _viewModel.UID);
            }

            foreach (var learner in items)
            {
                ApplyLevelReward(learner);
            }
        }
    }
}
<div>OK!!</div>