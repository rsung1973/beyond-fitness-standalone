@using System.IO
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using System.Web
@using System.Data
@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@using CommonLib.DataAccess
@using CommonLib.Core.Utility
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using WebHome.Models.Resources
@using WebHome.Properties
@functions
{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;

    StageProgress appraisalStage;

    int? AppraiseLevel(UserProfile learner,IQueryable<LessonTime> lessons, IQueryable<IGrouping<int, GameLevelRequirement>> requirements)
    {
        //var appraised = lessons.Where(l =>
        //                    l.RegisterLesson.LessonPriceType.LessonMissionBonusAwardingItem
        //                        .Where(b => b.CampaignMission.GameLevelRequirement
        //                                .Where(r => r.Threshold > 0)
        //                                .Any())
        //                        .Any());
        var appraisedItems = lessons
                                .SelectMany(l => l.RegisterLesson.LessonPriceType.LessonMissionBonusAwardingItem)
                                .SelectMany(t => t.CampaignMission.GameLevelRequirement)
                                .Where(r => r.Threshold > 0)
                                .ToList();

        int? levelID = 0;
        foreach (var g in requirements)
        {
            var toCheck = g.Any(r => appraisedItems
                                .Where(l => l.LevelID == g.Key)
                                .Where(l => l.MissionID == r.MissionID)
                                .Count() < r.Threshold);
            if(!toCheck)
            {
                levelID = g.Key;
                break;
            }
        }

        return levelID;
    }

    void ApplyLevel(UserProfile learner, int levelID,StageProgress stage)
    {
        var player = models.GetTable<Player>()
                        .Where(p => p.UID == learner.UID)
                        .Where(p => p.ProgressID == stage.ProgressID).FirstOrDefault();
        if (player == null)
        {
            player = new Player
            {
                UID = learner.UID,
                ProgressID = stage.ProgressID,
            };
            models.GetTable<Player>().InsertOnSubmit(player);
        }

        player.PlayerLevel = levelID;
        models.SubmitChanges();
    }

    void ApplyLevelReward(UserProfile learner)
    {
        //任務牆點數回饋加碼
        if (appraisalStage != null)
        {
            var player = models.GetTable<Player>()
                .Where(p => p.UID == learner.UID)
                .Where(p => p.ProgressID == appraisalStage.ProgressID)
                .FirstOrDefault();

            var totalPoints = models.GetTable<BonusTransaction>()
                .Where(t => t.UID == learner.UID)
                .Where(t => t.TransactionDate >= appraisalStage.StartDate)
                .Where(t => t.TransactionDate < appraisalStage.EndExclusiveDate)
                .Where(t => t.CampaignMissionBonus != null)
                .Sum(t => t.TransactionPoint);

            if (totalPoints > 0)
            {
                var rewardItem = player?.GameLevel.GameLevelReward
                        .Where(r => r.RewardID == (int)GameLevelReward.RewardDefinition.任務牆點數回饋加碼)
                        .FirstOrDefault();

                if (rewardItem?.Reward > 0)
                {
                    var account = learner.UID.PromptDepositAccount(models);
                    int awardPoints = totalPoints * rewardItem.Reward / 100;
                    var txn = new BonusTransaction
                    {
                        UID = account.UID,
                        TransactionPoint = awardPoints,
                        TransactionDate = DateTime.Now,
                        Reason = $"{GameLevelReward.RewardDefinition.任務牆點數回饋加碼}:{awardPoints}({totalPoints}*{rewardItem.Reward}%)",
                        ExpirationDate = new DateTime(DateTime.Today.Year + 1, 12, 31),
                    };
                    models.GetTable<BonusTransaction>().InsertOnSubmit(txn);
                    models.SubmitChanges();

                    account.CommitBonusSettlement(models);
                }
            }
        }
        models.SubmitChanges();
    }

}
@{

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _modelState = ViewContext.ModelState;

    QueryViewModel _viewModel = ViewBag.ViewModel as QueryViewModel;
    var Response = ViewContext.HttpContext.Response;

    appraisalStage = models.PromptCurrentStage();
    StageProgress stage = null;
    if (appraisalStage != null)
    {
        stage = appraisalStage;
        appraisalStage = models.GetTable<StageProgress>()
                .Where(s => s.ProgressID < appraisalStage.ProgressID)
                .OrderByDescending(s => s.ProgressID)
                .FirstOrDefault();
    }

    if (appraisalStage != null)
    {
        DateTime start = appraisalStage.StartDate.Value;
        DateTime exclusiveEnd = appraisalStage.EndExclusiveDate.Value;

        //stage = models.GetTable<StageProgress>()
        //        .Where(s => s.ProgressID > appraisalStage.ProgressID)
        //        .OrderBy(s => s.ProgressID)
        //        .FirstOrDefault();

        if (stage != null)
        {
            IQueryable<GameLevelRequirement> requirements = models.GetTable<GameLevelRequirement>().Where(r => r.Threshold > 0);
            var levelRequirements = requirements.GroupBy(r => r.LevelID).OrderByDescending(r => r.Key);
            IQueryable<UserProfile> items = models.GetTable<UserProfile>()
                                                .Where(u => u.LevelID == (int)Naming.MemberStatusDefinition.Checked
                                                    || u.LevelID == (int)Naming.MemberStatusDefinition.ReadyToRegister);

            foreach (var learner in items)
            {

                //ApplyLevelReward(learner);

                var lessons = models.GetTable<LessonTime>()
                    .Where(l => l.LessonAttendance != null)
                    .Where(l => l.ClassTime >= start)
                    .Where(l => l.ClassTime < exclusiveEnd)
                    .Where(l => l.GroupingLesson.RegisterLesson.Any(r => r.UID == learner.UID));

                if (lessons.Any())
                {
                    var levelID = AppraiseLevel(learner, lessons, levelRequirements);
                    if (levelID.HasValue)
                    {
                        ApplyLevel(learner, levelID.Value, stage);
                    }
                }
                else
                {
                    var contracts = models.PromptEffectiveContract()
                                        .Where(c => c.CourseContractMember.Any(m => m.UID == learner.UID));
                    if (contracts.Any())
                    {
                        ApplyLevel(learner, 0, stage);
                    }
                    else if (learner.ServingCoach != null)
                    {

                    }
                    else if (learner.UserRoleAuthorization.Any(r => r.RoleID != (int)Naming.RoleID.Learner))
                    {

                    }
                    else if (learner.UserRole.Any(r => r.RoleID != (int)Naming.RoleID.Learner))
                    {

                    }
                    else
                    {
                        learner.LevelID = (int)Naming.MemberStatusDefinition.Deleted;
                        learner.PID = learner.MemberCode;
                        if (learner.UserProfileExtension != null)
                        {
                            learner.UserProfileExtension.LineID = null;
                        }
                        models.SubmitChanges();
                    }
                }
            }
        }
    }
}
<div>OK!!</div>