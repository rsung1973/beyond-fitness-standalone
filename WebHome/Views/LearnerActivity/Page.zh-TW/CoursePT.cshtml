@using System.IO
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Mvc.ModelBinding

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using WebHome.Models.Resources
@functions
{
    LessonSelfAssessment GetItem(IQueryable<LessonSelfAssessment> assessments, String assessment)
    {
        return assessments.Where(a => a.Assessment == assessment).FirstOrDefault();
    }
}
@{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _modelState = ViewContext.ModelState;

    Layout = "~/Views/LearnerActivity/Template/MainPage.cshtml";
    ViewBag.MainClass = "home";
    ViewBag.MenuDark = false;
    String lang = ViewBag.Lang ?? "zh-TW";
    var langPath = lang == "zh-TW"
        ? "tw"
        : lang == "en-US"
            ? "en"
            : "ja";

    QueryViewModel _viewModel = ViewBag.ViewModel as QueryViewModel;
    LessonTime _model = this.Model as LessonTime;
    TrainingExecution _training = _model.TrainingPlan.Select(p => p.TrainingExecution).FirstOrDefault();
    var total = _training.TrainingExecutionStage.Sum(t => t.TotalMinutes) ?? 1;

    var profile = await Context.GetUserAsync();

    var registerID = _model.GroupingLesson.RegisterLesson.Where(r => r.UID == profile.UID)
                        .FirstOrDefault()?.RegisterID;

    var assessment = models.GetTable<LessonSelfAssessment>()
            .Where(s => s.LessonID == _model.LessonID)
            .Where(s => s.RegisterID == registerID);

}

@section MainContent
{
    <div class="card header-card shape-rounded" data-card-height="310">
        <div class="card-overlay bg-beyond-dark opacity-95"></div>
    </div>
    @if (_model.IsPTSession()) {
        <h1 class="boxed-text-xl font-28 color-beyondsunny-light z-index-10 pt-5">體能訓練</h1>
        <p class="text-center z-index-10"><i class="fa-solid fa-fire-flame-curved px-2"></i>P.T @(_model.DurationInMinutes) Min<br/>@($"{_model.ClassTime:yyyy/MM/dd HH:mm}")</p>
    } else {
        <h1 class="boxed-text-xl font-28 color-beyondsunny-light z-index-10 pt-5">自主訓練</h1>
        <p class="text-center z-index-10"><i class="fa-solid fa-fire-flame-curved px-2"></i>P.I @(_model.DurationInMinutes) Min<br/>@($"{_model.ClassTime:yyyy/MM/dd HH:mm}")</p>
    }        

    <img style="margin-bottom:-80px" src="../images/icons/session/trx.svg" class="mx-auto over-card bg-transparent" width="200" />

    <div style="padding-top: 90px;" class="card card-style bg-beyond-dark custom-rounded-card top-100">
        <div class="content">
            <div class="row text-center px-4">
                <h3 class="color-white letter-spacing-1">@(_training.Emphasis ?? "重點稍後揭曉，一起加油達標")</h3>
                <span class="color-white opacity-30 fst-italic letter-spacing-1">@(_model.AsAttendingCoach.UserProfile.Nickname)</span>
            </div>

            @if (assessment.Any())
            {
                <div class="collapse show" id="collapse-healthy">
                    <div class="row text-center">
                        <div class="col-6 col-lg-3 col-md-3 mb-2">
                            <p class="mb-1 font-14 color-beyondred-dark">攝取水分c.c</p>
                            <h1 class="color-white">@($"{(LessonSelfAssessment.WaterIntakeIndication?)GetItem(assessment, "WaterIntake")?.SelectedIndex}")</h1>
                        </div>
                        @{
                            var duration = TimeSpan.FromHours((double)(GetItem(assessment, "SleepDuration")?.Score ?? 0));
                        }
                        <div class="col-6 col-lg-3 col-md-3 mb-2">
                            <p class="mb-1 font-14 color-beyondred-dark">睡眠時間<small class="font-11">hh:mm</small></p>
                            <h1 class="color-white">@($"{duration.Hours:00}"):@($"{duration.Minutes:00}")</h1>
                        </div>
                        <div class="col-6 col-lg-3 col-md-3">
                            <p class="mb-1 font-14 color-beyondred-dark">生理疲勞</p>
                            <h1 class="color-white">@($"{GetItem(assessment, "FatigueIndex")?.Score:.}")</h1>
                        </div>
                        <div class="col-6 col-lg-3 col-md-3 mb-2">
                            <p class="mb-1 font-14 color-beyondred-dark">心理壓力</p>
                            <h1 class="color-white">@($"{GetItem(assessment, "StressIndex")?.Score:.}")</h1>
                        </div>
                    </div>
                    <div class="divider mt-4 bg-beyondwhite-dark opacity-10"></div>
                </div>
            }

            <div class="@(assessment.Any() ? "collapse" : "collapse show")" id="collapse-lesson">
                <div class="row">
                    @foreach (var stage in models.GetTable<TrainingStage>())
                    {
                        await Html.RenderPartialAsync("~/Views/LearnerActivity/Page.zh-TW/Module/LessonTrainingStage.cshtml", new Object[] { _model, _training, stage, total });
                    }
                </div>
            </div>

            <p class="text-center pb-3">
                <a data-bs-toggle="collapse" href="#collapse-lesson"
                   class="btn btn-border rounded-xl fst-italic border-beyondwhite-dark color-beyondwhite-dark bg-transparent px-4 py-2 font-14 mt-5">
                    展開上課詳細資訊
                    <i class="fa-solid fa-angles-up ps-2"></i>
                </a>
            </p>
        </div>

    </div>
    @{ 
        await Html.RenderPartialAsync("~/Views/LearnerActivity/Page.zh-TW/Module/CourseFeedback.cshtml", _model);
    }
    @{
        await Html.RenderPartialAsync("~/Views/LearnerActivity/Page.zh-TW/Module/LessonItemIndication.cshtml", _model);
    }
    <script>
        function showContent(keyID) {
            var viewModel = {
                'KeyID': keyID
            };
            doPost('@Html.Raw(Url.Action("PopupCourseContent", "LearnerActivity"))', viewModel,
                function (data) {
                    $('#course-content').html(data);
                    $('#course-content').addClass('menu-active');
                    $('.menu-hider').addClass('menu-active');
                },
                function () {
                    $('.menu-active').removeClass('menu-active');
                });
        }

    </script>

}

@section PopupBox
{
    <div id="course-content"
         class="menu menu-box-top bg-beyond-dark"
         data-menu-height="cover"
         data-menu-width="cover">
    </div>
}
