@using System.IO
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using System.Web

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using WebHome.Models.Resources
@using WebHome.Properties
@using WebHome.Models.Timeline

@{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];
    _modelState = ViewContext.ModelState;

    String lang = ViewBag.Lang ?? "zh-TW";
    var langPath = lang == "zh-TW"
        ? "tw"
        : lang == "en-US"
            ? "en"
            : "ja";

    var profile = await Context.GetUserAsync();
    List<TimelineEvent> events = (List<TimelineEvent>)ViewBag.UserNotice;

    int totalCount = 0;

    TimelineEvent eventItem = profile.PromptEffectiveSystemBulletin(models);
    IQueryable<SystemEventBulletin> items = ((SystemBulletinEvent)eventItem)?.BulletinEventList;
    if (eventItem != null)
    {
        events.Add(eventItem);
        totalCount += items.Count();
    }

    eventItem = profile.CheckPromptContractEvent(models);
    int contractCount = 0;
    if (eventItem != null)
    {
        events.Add(eventItem);
        contractCount += ((PromptContractEvent)eventItem).ContractList.Count();
    }

    eventItem = profile.CheckPayoffDueEvent(models);
    if (eventItem != null)
    {
        events.Add(eventItem);
        contractCount += ((PromptPayoffDueEvent)eventItem).ContractList.Count();
    }

    eventItem = profile.CheckSignContractEvent(models);
    if (eventItem != null)
    {
        events.Add(eventItem);
        var _item = (PromptSignContractEvent)eventItem;
        int count = _item.ContractList.Where(c => !c.InstallmentID.HasValue).Count()
                        + _item.ContractList.Where(c => c.InstallmentID.HasValue)
                            .GroupBy(c => c.InstallmentID).Count();
        contractCount += count;
    }

    eventItem = profile.CheckSignContractServiceEvent(models);
    if (eventItem != null)
    {
        events.Add(eventItem);
        contractCount += ((PromptSignContractServiceEvent)eventItem).ContractList.Count();
    }

    totalCount += contractCount;

    StageProgress current = models.PromptCurrentStage();
    eventItem = profile.PromptSelfAssessment(models, current);
    if (eventItem != null)
    {
        events.Add(eventItem);
        totalCount += ((SelfAssessmentEvent)eventItem).LessonList.Count();
    }

    eventItem = profile.PromptFeedbackSurvey(models, current);
    if (eventItem != null)
    {
        events.Add(eventItem);
        totalCount += ((FeedbackSurveyEvent)eventItem).LessonList.Count();
    }

    ViewContext.HttpContext.Items["ContractEventCount"] = contractCount;
    ViewContext.HttpContext.Items["TotalEventCount"] = totalCount;

}
