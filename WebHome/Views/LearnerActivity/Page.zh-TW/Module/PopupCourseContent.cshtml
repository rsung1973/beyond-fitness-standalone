@using System.IO
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Http
@using System.Web

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using WebHome.Models.Resources
@using WebHome.Properties
@using WebHome.Helper.BusinessOperation

@{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _modelState = ViewContext.ModelState;

    String lang = ViewBag.Lang ?? "zh-TW";
    var langPath = lang == "zh-TW"
        ? "tw"
        : lang == "en-US"
            ? "en"
            : "ja";

    QueryViewModel _viewModel = ViewBag.ViewModel as QueryViewModel;
    TrainingItemViewModel keyValues = new TrainingItemViewModel { };

    if (_viewModel?.KeyID != null)
    {
        keyValues = JsonConvert.DeserializeObject<TrainingItemViewModel>(_viewModel.KeyID.DecryptKey());
    }

    TrainingExecution training = models.GetTable<TrainingExecution>().Where(t => t.ExecutionID == keyValues.ExecutionID).FirstOrDefault();
    var stageItems = models.GetTable<TrainingStage>().ToArray();
    int nextStageID = ((keyValues.StageID-1 ?? 0) + 1) % stageItems.Length + 1;
    var nextStage = models.GetTable<TrainingExecutionStage>()
                                .Where(t => t.ExecutionID == keyValues.ExecutionID)
                                .Where(t => t.TotalMinutes > 0)
                                .Where(t => t.StageID >= nextStageID)
                                .OrderBy(t => t.StageID)
                                .FirstOrDefault();

    var items = models.GetTable<TrainingItem>()
            .Where(t => t.ExecutionID == keyValues.ExecutionID)
            .Where(t => t.TrainingType.TrainingStageItem.StageID == keyValues.StageID)
            .OrderBy(t => t.Sequence);

    var item = items.FirstOrDefault();

    var profile = await Context.GetUserAsync();

}
<div class="menu-title">

    <div class="d-flex mx-2 mx-lg-4 my-2">

        <h1 class="letter-spacing-2 mb-0 color-beyondwhite-light">
            @Html.Raw(item?.TrainingType?.TrainingStageItem.TrainingStage.Stage)·<small class="ps-2 font-12 font-400 text-capitalize color-beyondred-dark fst-italic"> @Html.Raw($"{(TrainingStage.StageDefinition?)item?.TrainingType?.TrainingStageItem.StageID}")</small>
        </h1>

        <a href="javascript:closeMenu();" class="close-menu color-white"><i class="fa fa-times"></i>&nbsp;</a>

    </div>

    <svg width="100%" height="10" xmlns="http://www.w3.org/2000/svg" class="mx-2 ps-3 mx-lg-4">

        <rect x="0" y="0" width="50" height="3" rx="3" ry="3" fill="#E76751" />

    </svg>

</div>

<div class="content">

    <div class="row">
        @foreach (var it in items)
        {
            item = it;
            <div class="col-12 col-lg-12 col-md-12">

                <div class="card card-style bg-white">
                    @if (item.TrainingType.BreakMark != true)
                    {
                        <div class="content px-2 me-1 pb-3">

                            <div class="d-flex ps-1">

                                <div>

                                    <!--大項類別-->

                                    <p class="mb-1 mt-n1 font-500 font-13 color-highlight letter-spacing-1">@Html.Raw(item.TrainingType.BodyParts)</p>

                                    <!--主動作名稱-->

                                    <h2 class="font-700 letter-spacing-1 color-beyond-dark">@Html.Raw(item.Description)</h2>

                                </div>

                                <!--重複組數-->
                                @if (item.GoalTurns != null)
                                {
                                    <div class="ms-auto">

                                        <a class="icon icon-xs bg-beyondwhite-dark rounded-m px-3 py-2 font-14">
                                            <b class="color-beyond-dark">@(item.GoalTurns)</b>
                                        </a>

                                        <b class="d-block color-beyond-dark font-12 font-400">Repeat</b>

                                    </div>
                                }
                            </div>

                            <div class="d-flex pt-2">

                                @foreach (var aid in item.TrainingItemAids)
                                {
                                    <a class="chip chip-small bg-gray-light">

                                        <i class="fa fa-check bg-green-dark"></i>

                                        <strong class="color-black font-400 text-capitalize font-13">@Html.Raw(aid.TrainingAids.ItemName)</strong>

                                    </a>
                                }
                            </div>

                            <!--備註-->

                            <p class="ps-1 color-beyond-dark opacity-80">

                                @Html.Raw(item.Remark)

                            </p>

                            <!--休息時間-->
                            @if (item.BreakIntervalInSecond != null)
                            {
                                <div class="text-center">
                                    <b class="color-beyondred-dark text-capitalize fst-italic">休息<u class="px-2">@(item.BreakIntervalInSecond)</u>秒</b>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="content px-2 me-1 pb-3">

                            <div class="d-flex ps-1">

                                <div>
                                    <!--大項類別-->
                                    <p class="mb-1 mt-n1 font-500 font-13 color-highlight letter-spacing-1"></p>
                                    <!--主動作名稱-->
                                    <h2 class="font-700 letter-spacing-1 color-beyond-dark">
                                    </h2>
                                </div>
                            </div>
                            <!--備註-->
                            <p class="ps-1 color-beyond-dark opacity-80">
                                @Html.Raw(item.Remark)
                            </p>

                            <!--休息時間-->
                            @if (item.BreakIntervalInSecond != null || item.Repeats!=null)
                            {
                                <div class="text-center">
                                    <b class="color-beyondred-dark text-capitalize fst-italic">
                                        @if (item.BreakIntervalInSecond != null)
                                        {
                                            <text>休息 @(item.BreakIntervalInSecond) <u class="px-2">@(item.BreakIntervalInSecond)</u>秒</text>
                                        }
                                        @if (item.BreakIntervalInSecond != null && item.Repeats != null)
                                        {
                                            <text> / </text>
                                        }
                                        @if (item.Repeats != null)
                                        {
                                            <text>Repeat * @(item.Repeats)</text>
                                        }
                                    </b>
                                </div>
                            }
                        </div>
                    }
                </div>

            </div>
        }
    </div>



    <a href="javascript:showContent('@Html.Raw((new { nextStage.ExecutionID, nextStage.StageID }).JsonStringify().EncryptKey())');" data-menu="health-declaration-2"
       class="btn btn-full rounded-xl border-light border-opacity-50 bg-beyond-dark font-500 px-3 py-2 font-15 mt-5">Next</a>

    <div class="my-5 px-4">

        <div class="d-flex mt-4">
            @foreach (var stageItem in stageItems)
            {
                <div class="me-auto">
                    <i class="@(stageItem.StageID == keyValues.StageID ? "fa-regular fa-circle-play color-beyondred-dark font-28" : "fa-regular fa-circle-stop color-beyondwhite-dark font-28 opacity-30")"></i><span class="color-beyondwhite-dark d-block pt-1 letter-spacing-1">@Html.Raw(stageItem.Stage)</span>
                </div>
            }
        </div>

        <div class="divider mx-4 bg-beyondwhite-dark opacity-10" style="margin-top:-45px"></div>

    </div>

    <a href="javascript:closeMenu();"
       class="close-menu text-capitalize font-700 text-center p-3 w-100 d-block font-14 py-5 color-white opacity-50">關閉視窗，狠心離開</a>

</div>