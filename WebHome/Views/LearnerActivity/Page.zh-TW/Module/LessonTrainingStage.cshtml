@using System.IO
@using System.Linq.Expressions
@using System.Text
@using System.Net
@using System.Net.Mail
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.Extensions.Logging

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using WebHome.Models.Resources
@using WebHome.Properties;

@{

    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _modelState = ViewContext.ModelState;

    String lang = ViewBag.Lang ?? "zh-TW";
    var langPath = lang == "zh-TW"
    ? "tw"
    : lang == "en-US"
    ? "en"
    : "ja";

    Object[] _model = (Object[])this.Model;
}
@{
    var learner = await Context.GetUserAsync();
    LessonTime lesson = (LessonTime)_model[0];
    TrainingExecution training = (TrainingExecution)_model[1];
    decimal total = Math.Max((decimal)_model[3], 1);
    TrainingStage stage = (TrainingStage)_model[2];
    var items = models.GetTable<TrainingItem>()
            .Where(t => t.ExecutionID == training.ExecutionID)
            .Where(t => t.TrainingType.TrainingStageItem.StageID == stage.StageID)
            .OrderBy(t => t.Sequence);

    TrainingExecutionStage trainingStage = training.TrainingExecutionStage.Where(x => x.StageID == stage.StageID).FirstOrDefault();

}
<div class="col-12 col-lg-6 col-md-6">
    @{ 

        var showContent = trainingStage?.TotalMinutes > 0
                ? $"javascript:showContent('{(new { training.ExecutionID, stage.StageID }).JsonStringify().EncryptKey()}');"
                : "#";
    }
    <a href="@Html.Raw(showContent)" class="d-flex mb-4 px-4 px-lg-5 px-md-5">
        <div class="align-self-center w-100">
            <h5 class="letter-spacing-2 color-white">
                @Html.Raw(stage.Stage)<small class="font-400 font-12 letter-spacing-1 opacity-80 fst-italic px-1">@($"{(TrainingStage.StageDefinition)stage.StageID}")</small>
            </h5>

            <div class="progress mt-2 mb-1 rounded-s" style="height:5px;">
                @{ 
                    var percent = Math.Round((trainingStage?.TotalMinutes ?? 0) * 100 / total);
                }
                <div class="progress-bar border-0 bg-stage@(stage.StageID) text-start ps-2 rounded-s" role="progressbar" style="width: @($"{percent}%")"
                     aria-valuenow="@(percent)" aria-valuemin="0" aria-valuemax="100">

                </div>
            </div>
            <div class="row mb-0">
                <div class="col-6 text-start">
                    <span class="mb-n1 font-12 opacity-40 color-white">
                        Read More <i class="fa-solid fa-chevron-right pe-3"></i>
                    </span>
                </div>
                <div class="col-6 text-end">
                    @{
                        var totalSeconds = (int)(trainingStage?.TotalMinutes * 60 ?? 0);
                     }
                    <p class="mb-n1 font-13 color-white opacity-70">@($"{totalSeconds / 60:00}"):@($"{totalSeconds % 60:00}")</p>
                </div>
            </div>
        </div>
    </a>
</div>
