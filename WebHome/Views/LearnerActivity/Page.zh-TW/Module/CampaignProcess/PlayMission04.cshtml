@using System.IO
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Mvc.ModelBinding

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using WebHome.Models.Resources

@{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _modelState = ViewContext.ModelState;

    ViewBag.MainClass = "home";
    ViewBag.MenuDark = false;
    String lang = ViewBag.Lang ?? "zh-TW";
    var langPath = lang == "zh-TW"
        ? "tw"
        : lang == "en-US"
            ? "en"
            : "ja";

    GameLevelRequirement _model = this.Model as GameLevelRequirement;
    PromotionAppraisalDataModel appraisal = (PromotionAppraisalDataModel)ViewBag.Appraisal;
    Player currentPlayer = ViewBag.Player as Player;
    var profile = currentPlayer?.UserProfile ?? (await Context.GetUserAsync());

    CampaignMissionDataModel mission = (CampaignMissionDataModel)ViewBag.CurrentMission;

    StageProgress current = (StageProgress)ViewBag.StageProgress;

}
@{
    var lessons = models.GetTable<LessonTime>()
            .Where(l => l.ClassTime >= current.StartDate)
            .Where(l => l.ClassTime < current.EndExclusiveDate)
            .Where(l => l.LessonAttendance != null);

    var items = models.PromptLearnerLessons(
                profile.UID.PromptLearnerRegisterLessons(models)
                    .Join(models.GetTable<LessonPriceType>()
                                    .Where(l => l.Status == (int)Naming.LessonPriceFeature.自主訓練),
                        r => r.ClassLevel, p => p.PriceID, (r, p) => r),
                lessons);

    mission.Goal = _model?.Threshold ?? 0;
    mission.ResultModel = items.Count();
    mission.CheckResult = _model == null ? true : (int)mission.ResultModel >= _model.Threshold;
}
<div class="card bg-beyond-dark text-center">
    <img src="@Html.Raw(mission.CheckResult ? "../images/icons/finish.svg" : "../images/icons/unfinish.svg")" class="rounded-circle mb-2 mt-2" width="100%" height="100%">
    <span class="d-block color-beyondwhite-dark @Html.Raw(mission.CheckResult ? "" : "opacity-50") font-14">P.I<small class="d-block">(@(mission.ResultModel)/@(mission.Goal))</small></span>

</div>