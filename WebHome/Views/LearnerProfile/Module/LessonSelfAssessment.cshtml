@using System.IO
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Mvc.ModelBinding

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@{

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    LessonTime _model;

    QueryViewModel _viewModel = ViewBag.ViewModel as QueryViewModel;

    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _model = (LessonTime)this.Model;
    var lessonItem = _model;
}
@{
    UserProfile learner = (UserProfile)ViewBag.Learner;

    var registerID = lessonItem.GroupingLesson.RegisterLesson.Where(r => r.UID == learner.UID)
                        .FirstOrDefault()?.RegisterID;
}
<a href="javascript:signaturePanel();">課前健康自評</a>
<i class="zmdi livicon-evo"
   data-options="name: pencil.svg; size: 20px; style: original; strokeStyle:round; strokeColor:#052333; strokeWidth:2px; autoPlay:true"></i>
<script>
    function signaturePanel() {

        if ($global.$currentModal) {
            $global.$currentModal.modal('show');
            return;
        }

        @*
            $global.commitSignature = function (sigData) {
            showLoading();
            var viewModel = {
                keyID: '@Html.Raw(lessonItem.LessonID.EncryptKey())',
                Signature: sigData
            };
            $.post('@Html.Raw(Url.Action("LearnerAttendLesson", "Attendance"))', viewModel, function (data) {
        *@
        $global.commitSignature = function (viewModel, done, dialogID) {
            showLoading();
            viewModel.KeyID = '@Html.Raw((new { lessonItem.LessonID, RegisterID = registerID }).JsonStringify().EncryptKey())';
            $.post('@Html.Raw(Url.Action("LearnerAttendLesson2024", "Attendance"))', viewModel, function (data) {
                hideLoading();
                if ($.isPlainObject(data)) {
                    if (data.result) {
                        if (data.updateOnly) {
                            $global.$currentModal.modal('hide');
                        } else {
                            Swal.fire({
                                title: "全部打卡成功!",
                                text: "資料已經完成打卡 Bye!",
                                icon: "success",
                                showCancelButton: false,
                                closeOnConfirm: true
                            }).then((result) => {
                                refreshTrainingContent(dialogID);
                            });
                        }
                    } else {
                        Swal.fire(
                            'Oops...',
                            data.message,
                            'warning'
                        );
                    }
                } else {
                    $(data).appendTo($('body'));
                }
            });
        };

        showLoading();
        $.post('@Html.Raw(Url.Action("SignaturePanel2024", "LessonConsole"))', {'KeyID' : '@Html.Raw((new { lessonItem.LessonID, LearnerID = learner.UID }).JsonStringify().EncryptKey())' }, function (data) {
            hideLoading();
            $(data).appendTo($('body'));
        });
    }

</script>
@if (_viewModel?.DialogID == null)
{
    <script>
        $(function () {
            signaturePanel();
        });
    </script>
}
@{
    if (_model.RegisterLesson.LessonPriceType.LessonMissionBonusAwardingItem.Any(b => b.MissionID == (int)CampaignMission.CampaignMissionType.PT))
    {
        foreach (var item in lessonItem.GroupingLesson.RegisterLesson)
        {
            var feedback = lessonItem.LessonFeedBack.Where(r => r.RegisterID == item.RegisterID).FirstOrDefault();
            if (feedback == null)
            {
                lessonItem.LessonFeedBack.Add(new LessonFeedBack
                {
                    LessonID = lessonItem.LessonID,
                    RegisterID = item.RegisterID,
                });
                models.SubmitChanges();
            }
        }

        var notAssessed = lessonItem.LessonFeedBack.Where(f => !f.CommitAssessment.HasValue).FirstOrDefault();
        if (notAssessed != null)
        {
            if (notAssessed.RegisterID != registerID)
            {
                <script>
                    $(function () {
                        $('').launchDownload('@Html.Raw(Url.Action("LessonTrainingContent", "ConsoleHome"))', @Html.Raw((new { KeyID = _model.LessonID.EncryptKey(), LearnerID = notAssessed.RegisterLesson.UID }).JsonStringify()));
                    });
                </script>
            }
            else
            {
                <script>
                    var timeToCheck = new Date('@Html.Raw($"{lessonItem.ClassTime.Value.AddMinutes(-5):yyyy/MM/dd HH:mm:ss}")');
                    function checkAssessment() {
                        var now = new Date();
                        if (now - timeToCheck >= 0) {
                            var viewModel = {
                                'KeyID': '@Html.Raw((new { lessonItem.LessonID, RegisterID = registerID }).JsonStringify().EncryptKey())'
                            };
                            doPost('@Html.Raw(Url.Action("CheckSelfAssessment", "LearnerActivity"))', viewModel,
                                function (data) {
                                    if (data.done) {

                                    } else {
                                        signaturePanel();
                                    }
                                },
                                function () {
                                });

                        } else {
                            setTimeout(checkAssessment, 30000);
                        }
                    }

                    $(function () {
                        checkAssessment();
                    });
                </script>
            }
        }
    }
}