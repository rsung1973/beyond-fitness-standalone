
@using System.IO
@using System.Linq.Expressions
@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Newtonsoft.Json

@functions
{
    List<int[]> countableBase;
    int baseCount;

    object[] CalcAverage(object[] data)
    {
        MonthlyCoachRevenueIndicator indicator = (MonthlyCoachRevenueIndicator)data[0];
        var baseItem = countableBase.Where(b => b[0] == indicator.CoachID).FirstOrDefault();
        data[2] = baseItem?[1] ?? baseCount;
        data[3] = Math.Round(((int?)data[1] ?? 0m) / (int)data[2], 2);
        return data;
    }

}
@{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;
    MonthlyIndicatorQueryViewModel _viewModel;
    IQueryable<MonthlyCoachRevenueIndicator> _model = this.Model as IQueryable<MonthlyCoachRevenueIndicator>;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _modelState = ViewContext.ModelState;
    _viewModel = (MonthlyIndicatorQueryViewModel)ViewBag.ViewModel;
    String _dialogID = _viewModel.DialogID;
    ViewBag.ReuseModal = true;

    IQueryable<MonthlyIndicator> indicators = (IQueryable<MonthlyIndicator>)ViewBag.Indicators;
    baseCount = indicators.Count();

    var settlementItems = models.GetTable<Settlement>()
                .Where(s => s.StartDate >= _viewModel.DateFrom)
                .Where(s => s.StartDate < _viewModel.DateTo);
    var countableSalaryItems = models.GetTable<CoachMonthlySalary>()
                .Where(c => settlementItems.Any(s => c.SettlementID == s.SettlementID))
                .Where(c => c.AvgFlag == true);
    countableBase = countableSalaryItems.GroupBy(c => c.CoachID)
                .Select(g => new int[] { g.Key, g.Count() })
                .ToList();

    var rankingItems = _model.ToList()
            .GroupBy(c => c.CoachID)
            .Select(g => CalcAverage(new object[] { g.OrderByDescending(m => m.PeriodID).First(), g.Sum(c => c.PTCount), 0, 0 }))
            .OrderByDescending(d => d[3])
            .ToList();
}
<div class="modal" tabindex="-1" role="dialog" id="@(_dialogID)" aria-labelledby="exampleModalLongTitle"
     aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <a class="closebutton" data-dismiss="modal"></a>
            <div class="card">
                <div class="body">
                    <div class="table-responsive">
                        <table class="table table-striped table-custom nowrap dataTable dataTable-lessonlist"
                               style="width:100%">
                            <thead>
                                <tr>
                                    <th>分店</th>
                                    <th>姓名</th>
                                    @* <th>等級</th> *@
                                    <th>累計PT數</th>
                                    <th>工作月數</th>
                                    <th>平均PT數</th>
                                    <th>排行榜</th>
                                    <th>積分</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int idx = 0;
                                    decimal current = 0;
                                }
                                @foreach (var item in rankingItems)
                                {
                                    MonthlyCoachRevenueIndicator d = (MonthlyCoachRevenueIndicator)item[0];
                                    if (current != (decimal)item[3])
                                    {
                                        idx++;
                                    }
                                    current = (decimal)item[3];
                                    <tr>
                                        <td>@Html.Raw(d.BranchStore?.BranchName)</td>
                                        <td>@Html.Raw(d.ServingCoach.UserProfile.FullName())</td>
                                        @* <td>@Html.Raw(d.ProfessionalLevel.LevelName)</td> *@
                                        <td>@($"{item[1]:##,###,###,###.##}")</td>
                                        <td>@($"{item[2]}")</td>
                                        <td>@($"{item[3]:##,###,###,###.00}")</td>
                                        <td>
                                            @if (current > 0)
                                            {
                                                if (idx == 1 /*item == lessonCountRanking.First()*/)
                                                {
                                                    <i class="zmdi livicon-evo"
                                                       data-options="name: trophy.svg; size: 24px; original: autoPlay:true"></i>
                                                }
                                                else
                                                {
                                                    <text>@(idx /*lessonCountRanking.Count(l => l.Subtotal > item.Subtotal) + 1*/)</text>
                                                }
                                            }
                                        </td>
                                        <td>
                                            @if (current > 0)
                                            {
                                                Write(Math.Max(11 - idx, 0));
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @{ await Html.RenderPartialAsync("~/Views/ConsoleHome/Shared/BSModalScript.cshtml", model: _dialogID);}
    <script>
        var dtLesssonList;
        $(function () {
            $('#@(_dialogID) .livicon-evo').addLiviconEvo();
            if (dtLesssonList != undefined) {
                dtLesssonList.destroy();
            }
            dtLesssonList = $('#@(_dialogID) .dataTable-lessonlist').DataTable({
                "filter": true,
                "bPaginate": true,
                "info": true,
                "order": [
                    [4, 'desc']
                ],
                "language": {
                    "lengthMenu": "每頁顯示 _MENU_ 筆資料",
                    "zeroRecords": "沒有資料也是種福氣",
                    "info": "共 _TOTAL_ 筆，目前顯示第 _START_ 至 _END_筆資料",
                    "infoEmpty": "顯示 0 筆的資料",
                    "infoFiltered": "(總共從 _MAX_ 筆資料過濾)",
                    "loadingRecords": "快馬加鞭處理中...",
                    "processing": "快馬加鞭處理中...",
                    "search": "快速搜尋：",
                    "paginate": {
                        "first": "第一頁",
                        "last": "最後一頁",
                        "next": "下一頁",
                        "previous": "前一頁"
                    },
                },
                "columnDefs": [{
                    targets: [2, 3, 4, 5, 6],
                    className: "align-center"
                }],
                scrollX: true,
                scrollCollapse: true,
                fixedColumns: {
                    leftColumns: 1,
                }
            });
        });
    </script>
</div>