@using System.IO
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using System.Web
@using System.Data
@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@using CommonLib.DataAccess
@using CommonLib.Core.Utility
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using WebHome.Models.Resources
@using WebHome.Properties
@functions
{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;

}
@{

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _modelState = ViewContext.ModelState;

    QueryViewModel _viewModel = ViewBag.ViewModel as QueryViewModel;
    var Response = ViewContext.HttpContext.Response;

    DateTime start = new DateTime(2024, 7, 1);
    DateTime exclusiveEnd = new DateTime(2024, 10, 1);

    IQueryable<GameLevelRequirement> requirements = models.GetTable<GameLevelRequirement>().Where(r => r.Threshold > 0);
    var levelRequirements = requirements.GroupBy(r => r.LevelID).OrderByDescending(r => r.Key);
    IQueryable<UserProfile> items = models.GetTable<UserProfile>()
                                        .Where(u => u.LevelID == (int)Naming.MemberStatusDefinition.Checked
                                            || u.LevelID == (int)Naming.MemberStatusDefinition.ReadyToRegister);

    foreach (var learner in items)
    {

        //ApplyLevelReward(learner);

        var lessons = models.GetTable<LessonTime>()
            .Where(l => l.LessonAttendance != null)
            .Where(l => l.ClassTime >= start)
            .Where(l => l.ClassTime < exclusiveEnd)
            .Where(l => l.GroupingLesson.RegisterLesson.Any(r => r.UID == learner.UID));

        if (lessons.Any())
        {

        }
        else
        {
            var contracts = models.PromptEffectiveContract()
                                .Where(c => c.CourseContractMember.Any(m => m.UID == learner.UID));
            if (contracts.Any())
            {

            }
            else if (learner.ServingCoach != null)
            {

            }
            else if (learner.UserRoleAuthorization
                .Where(r => r.RoleID != (int)Naming.RoleID.Learner)
                .Where(r => r.RoleID != (int)Naming.RoleID.Preliminary).Any())
            {

            }
            else if (learner.UserRole
                .Where(r => r.RoleID != (int)Naming.RoleID.Learner)
                .Where(r => r.RoleID != (int)Naming.RoleID.Preliminary).Any())
            {

            }
            else
            {
                learner.LevelID = (int)Naming.MemberStatusDefinition.Deleted;
                learner.PID = learner.MemberCode;
                if (learner.UserProfileExtension != null)
                {
                    learner.UserProfileExtension.LineID = null;
                }
                models.SubmitChanges();
            }
        }
    }
}
<div>OK!!</div>