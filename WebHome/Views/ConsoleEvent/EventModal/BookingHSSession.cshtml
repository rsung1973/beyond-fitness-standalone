
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@{

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    UserProfile _model;
    CalendarEventViewModel _viewModel;
    String _dialogID = $"booking{DateTime.Now.Ticks}";
    UserProfile _profile;
    IQueryable<CourseContract> _contracts;
    IQueryable<EnterpriseCourseContract> _enterpriseContract;

    BookingLessonPageModel _pageModel = (BookingLessonPageModel)ViewBag.PageModel;

    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _model = (UserProfile)this.Model;
    _viewModel = (CalendarEventViewModel)ViewBag.ViewModel;
    _profile = await Context.GetUserAsync();
    _contracts = models.GetTable<CourseContractMember>()
        .Where(m => m.UID == _model.UID)
            .Join(models.GetTable<CourseContract>(), m => m.ContractID, t => t.ContractID, (m, t) => t);
    _enterpriseContract = models.GetTable<EnterpriseCourseMember>()
        .Where(m => m.UID == _model.UID)
            .Join(models.GetTable<EnterpriseCourseContract>()
                .Where(c => c.Expiration >= DateTime.Today)
                , m => m.ContractID, t => t.ContractID, (m, t) => t);

    bool _currentDisabled = false;
}
@{
    var enterpriseLessons = _enterpriseContract.Join(models.GetTable<RegisterLessonEnterprise>(), t => t.ContractID, r => r.ContractID, (t, r) => r);
    var enterpriseTrial = enterpriseLessons.Where(r => r.EnterpriseCourseContent.EnterpriseLessonType.Status == (int)Naming.LessonPriceStatus.體驗課程);
    var enterpriseTrialItem = enterpriseTrial.FirstOrDefault();
}

@{
    var contractLessons = _contracts.Join(models.GetTable<RegisterLessonContract>(), c => c.ContractID, r => r.ContractID, (c, r) => r)
                            .Select(r => r.RegisterLesson)
                            .Where(r => r.UID == _model.UID)
                            .Where(r => r.Attended != (int)Naming.LessonStatus.課程結束);

    List<int> installmentID = new List<int>();

    var lessons = models.GetTable<RegisterLesson>()
                    .Where(r => r.UID == _model.UID)
                    .Where(r => r.Attended != (int)Naming.LessonStatus.課程結束);

}
@{
    _currentDisabled = false;
}
@foreach (var item in contractLessons
    .Where(r => r.LessonPriceType.Status == (int)Naming.LessonPriceStatus.營養課程
        || r.LessonPriceType.Status == (int)Naming.LessonPriceStatus.運動恢復課程
        || r.LessonPriceType.Status == (int)Naming.LessonPriceStatus.運動防護課程)
    .OrderBy(r => r.RegisterLessonContract.ContractID))
{
    var contract = item.RegisterLessonContract.CourseContract;
    if (contract != null)
    {
        if (contract.Status == (int)Naming.CourseContractStatus.已終止)
        {
            continue;
        }

        var remainedCount = item.RemainedLessonCount();
        if (remainedCount <= 0)
        {
            continue;
        }

        var validContract = contract.Expiration.Value >= DateTime.Today;
        var bookingCount = contract.AttendedLessonCount();
        var totalPaid = contract.TotalPaidAmount();
        var payoffStatus = contract.TotalCost / contract.Lessons * (bookingCount + 1) <= totalPaid;
        bool revisionStatus = contract.RevisionList.Any(c => c.CourseContract.Status < (int)Naming.CourseContractStatus.已生效);
        bool bookable = validContract && payoffStatus && !revisionStatus;
        if (bookable)
        {
            _pageModel.HasChoice = true && !_currentDisabled;
            if (contract.InstallmentID.HasValue)
            {
                if (installmentID.Contains(contract.InstallmentID.Value))
                {
                    bookable = false;
                }
                else
                {
                    installmentID.Add(contract.InstallmentID.Value);
                }
            }
        }
        <li class="list-group-item">
            <div class="media">
                <div class="pull-left">
                    <div class="controls">
                        <label class="fancy-checkbox">
                            <input type="checkbox" id="PTSession@(item.RegisterID)" disabled="@(!(bookable && !_currentDisabled))"  name="RegisterID" value="@(item.RegisterID)" onclick="selectBooking(this, '@((int)Naming.LessonPriceStatus.一般課程)');">
                            <span></span>
                        </label>
                    </div>
                </div>
                <div class="media-body">
                    <div class="media-heading">
                        <a class="m-r-10">
                            @(contract.CourseContractType.TypeName)
                        </a>
                        <small class="float-right text-muted"><time>@(remainedCount)/@(contract.Lessons)</time></small>
                        <div class="msg">
                            @switch(item.LessonPriceType.Status)
                            {
                                case (int)Naming.LessonPriceStatus.營養課程:
                                    <text>S.D Session</text>
                                    break;
                                case (int)Naming.LessonPriceStatus.運動恢復課程:
                                    <text>S.R Session</text>
                                    break;
                                case (int)Naming.LessonPriceStatus.運動防護課程:
                                    <text>A.T Session</text>
                                    break;
                            }
                            (@(item.LessonPriceType.DurationInMinutes)分鐘)
                            <span class="float-right">
                                @{
                                    await Html.RenderPartialAsync("~/Views/Common/BranchStoreName.cshtml", contract.CourseContractExtension.BranchStore);
                                }
                            </span>
                        </div>
                    </div>
                    <p class="msg col-blue">
                        <i class="zmdi zmdi-alarm-check"></i> 合約迄日：@($"{contract.Expiration:yyyy/MM/dd}")
                    </p>
                    @if (!validContract)
                    {
                        <p class="msg col-red"><i class="zmdi zmdi-info-outline"></i>合約尚未生效或已過期</p>
                    }
                    @if (!payoffStatus)
                    {
                        <p class="msg col-red"><i class="zmdi zmdi-info-outline"></i>合約繳款餘額不足（未繳清：@(String.Format("{0:##,###,###,###}", contract.TotalCost - totalPaid))元）</p>
                    }
                    @if (revisionStatus)
                    {
                        <p class="msg col-red"><i class="zmdi zmdi-info-outline"></i>合約服務申請進行中</p>
                    }
                </div>
            </div>
        </li>
    }
}


